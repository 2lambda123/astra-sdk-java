package com.dstx.astra.boot.autoconfigure;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.datastax.oss.driver.api.core.CqlSession;
import com.dstx.astra.sdk.AstraClient;
import com.dstx.astra.sdk.AstraClient.AstraClientBuilder;

/**
 * Initializing AstraClient (if class present in classpath)
 * - #1 Configuration with application.properties
 * - #2 Configuration with environment variables
 * - #3 Configuration with AstraRC on file system in user.home
 * 
 * You can also define your {@link AstraClient} explicitely.
 * 
 * @author Cedrick LUNVEN (@clunven)
 */
@Configuration
@ConditionalOnClass(AstraClient.class)
@EnableConfigurationProperties(AstraClientProperties.class)
public class AstraConfiguration {

    @Autowired
    private AstraClientProperties astraClientProperties;
    
    @Bean
    @ConditionalOnMissingBean
    public AstraClient astraClient() {
        /* 
         * Load properties and initialize the client
         */
        ;
        AstraClientBuilder builder = AstraClient.builder()
             .databaseId(astraClientProperties.getDatabaseId())
             .cloudProviderRegion(astraClientProperties.getCloudRegion())
             .appToken(astraClientProperties.getApplicationToken());
        
        if (null != astraClientProperties.getSecureConnectBundlePath() &&
            !"".equals(astraClientProperties.getSecureConnectBundlePath())) {
            builder = builder.secureConnectBundle(astraClientProperties.getSecureConnectBundlePath());
        }
        
        if (null != astraClientProperties.getKeyspace() &&
                !"".equals(astraClientProperties.getKeyspace())) {
            builder = builder.keyspace(astraClientProperties.getKeyspace());  
        }
        
        return builder.build();
    }
    
    /**
     * We want the CqlSession generated by {@link AstraClient}.
     * 
     * @param astraClient
     *      astraClient
     * @return
     *      the ccassandra session
     */
    @Bean
    public CqlSession cqlSession(AstraClient astraClient) {
        return astraClient.cqlSession();
    }
    

}
